--- Previous knowledge ---

There's some information about this topic in the document
doc/linux_system_calls.txt that is helpful to fully understand this document.

--- What we do ---

What I do in yarr2 to hook syscalls is change the whole system call table. The
system call table seems to me like the first place a forensic will look in the
kernel looking for evidences, so the less we deal with it the better I guess.

--- How do we do it for 64-bit ---

Long-story short, I change the immediate that represents the address of
sys_call_table in a specific instruction somewhere in the kernel. Now, a little
bit more of detail.

As I would like to rely on as fewer kernel resources/information as possible I
don't get the address of the do_syscall_64() function from the kernel's symbol
table (if it is there, I don't know, but I suppose). Instead what I do can be
summarized in these steps:
    * Read the address in LSTAR MSR (entry point for syscall instruction).
    * Look into the code byte by byte looking for the first e8 byte. This byte
      corresponds to a call instruction that jumps to do_syscall_64(), its
      address is encoded as a 32-bit immediate next to the e8 byte.
    * We iterate on the code of do_syscall_64() looking for a 8b byte. This
      byte corresponds to a mov instruction that encodes the address of
      sys_call_table. However there are two 8b bytes before the one we really
      want, so we have to skip those.
    * We extract the address of the sys_call_table from the mov instruction.
    * We patch the immediate in the mov instruction with our fake system call
      table.

Easy peasy, right? Bullshit, it was complicated >_<

--- How do we do it for 32-bit ---

// TODO: Keep writing.
